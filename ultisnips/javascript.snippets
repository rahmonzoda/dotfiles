snippet fn "Function"
function ${1:functionName}(${2}) {
	${0:${VISUAL}}
}
endsnippet

snippet gfn "Generator"
function* ${1:generatorName}(${2}) {
	${0:${VISUAL}}
}
endsnippet

snippet efn "Function Expression"
const ${1:functionName} = (${2}) => {
	${0:${VISUAL}}
};
endsnippet

snippet cla "class"
class ${1:name} {
	constructor(${2:arg}) {
		${0:${VISUAL}}
	}
}
endsnippet

snippet if "if (condition) { ... }"
if (${1:true}) {
	${0:${VISUAL}}
}
endsnippet

snippet ife "if (condition) { ... } else { ... }"
if (${1:true}) {
	${0:${VISUAL}}
} else {
	${2}
}
endsnippet

snippet switch "switch ( expression)"
switch (${1:expression}) {
	case '${3:case}':
		${4}
		break;
	${0}
	default:
		${2}
}
endsnippet

snippet case "case 'xyz': ... break"
case '${1:case}':
	${0:${VISUAL}}
	break;
endsnippet

snippet try "try { ... } catch(e) { ... }"
try {
	${0:${VISUAL}}
} catch (${1:e}) {
	${2:/* handle error */}
}
endsnippet

snippet tryf "try { ... } catch(e) { ... } finally { ... }"
try {
	${0:${VISUAL}}
} catch (${1:e}) {
	${2:/* handle error */}
} finally {
	${3:/* be executed regardless of the try / catch result*/}
}
endsnippet

snippet for "for (...) {...}"
for (let ${1:i} = 0; $1 < $2; $1 += 1) {
	${0:${VISUAL}}
}
endsnippet

snippet forr "reversed for (...) {...}"
for (let ${2:i} = ${1:Things.length} - 1; $2 >= 0; $2 -= 1) {
	${0:${VISUAL}}
}
endsnippet

snippet wh "(condition) { ... }"
while (${1:/* condition */}) {
	${0:${VISUAL}}
}
endsnippet

snippet do "do { ... } while (condition)"
do {
	${0:${VISUAL}}
} while (${1:/* condition */});
endsnippet

snippet terr "throw new Error"
throw new Error('${1:error message}');
endsnippet

snippet cl "console.log" w
console.log(${0});
endsnippet

snippet cd "console.debug"
	console.debug(${0});
endsnippet

snippet ce "console.error" w
console.error(${0});
endsnippet

snippet ci "console.info" w
console.info(${0})
endsnippet

snippet ct "console.table" w
console.table(${0});
endsnippet

snippet de "debugger"
debugger;
endsnippet

snippet timeout
setTimeout(() => {${0}}${2}, ${1:10});
endsnippet

snippet im "import xyz from 'xyz'"
import ${1} from '${2:$1}';
endsnippet

snippet imas "import * as xyz from 'xyz'"
import * as ${1} from '${2:$1}';
endsnippet

snippet imm "import { member } from 'xyz'"
import {
	${1}
} from '${2}';
endsnippet

snippet ed "export default"
export default ${0}
endsnippet

#########
# React #
#########
snippet ir "import React from 'react';"
import React from 'react';
endsnippet

snippet ire "import React, {} from 'react';"
import React, {
	${0},
} from 'react';
endsnippet

snippet rcl "React Class"
import React, {
	Component,
} from 'react';

class ${1:MyComponent} extends Component {
	render() {
		${0:${VISUAL}}
	}
}

export default $1;
endsnippet

snippet rss "this.setState({})"
this.setState({
	${1}: ${0},
});
endsnippet

snippet rra "Redux Action"
export const ${1:actionName} = (${2}) => ({
	type: ${0:${VISUAL}}
});
endsnippet

snippet rrc "Redux Action Constant"
export const ${1} = '${0:${VISUAL}}$1';
endsnippet
